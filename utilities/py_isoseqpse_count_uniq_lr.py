#!/usr/bin/env python
import sys,re,time,argparse

def main(args):
	sys.stdout.write("Start analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()
	dic_read_label = parse_uniq_lr(args.input_lr)
	pgene_list = parse_pseudogene_list(args.input_pg)
	generate_pseudogene_output(args.input_iso,args.output)
	sys.stdout.write("Finish analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()

def parse_uniq_lr(input_lr_txt):
	global uniq_lr_list
	uniq_lr_list = []
	for line in input_lr_txt:
		uniq_lr_list.append(line.strip())
	return uniq_lr_list

def parse_pseudogene_list(input_pseu_list):
	global pgene_list
	pgene_list = []
	for inf	in input_pseu_list:
		for line in inf:
			pgene = line.strip().split("\t")[0]
			pgene_list.append(pgene)
		inf.close()
	return pgene_list

def generate_pseudogene_output(input_iso_gpd,output_gpd):
	for line in input_iso_gpd:
		gene_id_set,iso_id_set = line.strip().split("\t")[:2]
		lr_id_set = line.strip().split("\t")[-1]
		uniq_c = 0
		for gene_iso in (gene_id_set.split(",") + iso_id_set.split(",")):
			if gene_iso in pgene_list:
				for read in lr_id_set.split(","):
					if read[:-7] in uniq_lr_list:
						uniq_c += 1
				print >>output_gpd, "\t".join(["\t".join(line.strip().split("\t")[:-1]),str(uniq_c)])
				break
	input_iso_gpd.close()
	output_gpd.close()

def do_inputs():
	output_gpd_format = '''
1. gene id
2. isoform id
3. chromosome id
4. strand
5. TSS (+)
6. TTS (+)
7. number of support full-length long reads
8. number of support total long reads
9. exon count
10. exon start set
11. exon end set
12. For novel isoform, derived genic locus
13. For novel isoform, overlap percentage with derived genic locus
14. For novel singleton isoform, if it is located at the last exon of any known isoform. If yes, isoform ID otherwise '-'
15. For novel singleton isoform, the overlap percentage with the the last exon
16. For novel multi-exon isoform, number of splice sites are detected by anno and/or short reads; and the total number of splice sites
17. For novel multi-exon isoform, if the multi-exon isoform is the subset (based on splice junction combination) of known multi-exon isoform, isoform ID if yes otherwise '-'
18. For novel isoform, maximal length of polyA track in defined region
19. For novel isoform, maximal percentage of nucleotide A in defined region
20. Number of supporting long read with unique alignment'''

	parser = argparse.ArgumentParser(description="Function: output pseudogenes",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i','--input_iso',type=argparse.FileType('r'),required=True,help="Input: constructed isoform (GPD file) generated by 'py_isoseqpse_generate_output.py'")
	parser.add_argument('-l','--input_lr',type=argparse.FileType('r'),required=True,help="Input: long read id (TXT file) with best alignment generated by 'py_isoseqpse_extract_uniq_align_lr.py'")
	parser.add_argument('-g','--input_pg',type=argparse.FileType('r'),required=True,nargs="+",help="Input: pseudogene list (TXT files, tab-split), the first column showing the pseudogene gene id and/or transcript id")
	parser.add_argument('-o','--output',type=argparse.FileType('w'),required=True,help="Output: constructed pseudogenes (GPD file)")
	args = parser.parse_args()
	return args

if __name__=="__main__":
	args = do_inputs()
	main(args)
